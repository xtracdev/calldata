AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Template to create a firehose to pump data into redshift, backed
  up in an s3 bucket.

Parameters:
  FirehoseBucketName:
    Type: String
  RedshiftJDBCUrl:
    Type: String
  Username:
    Type: String
  Password:
    Type: String

Resources:



  FirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal: 
            Service: [firehose.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: s3Access
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['s3:AbortMultipartUpload','s3:GetBucketLocation','s3:GetObject','s3:ListBucket','s3:ListBucketMultipartUploads','s3:PutObject']
            Resource:
            - !Join ['', ['arn:aws:s3:::', !Ref FirehoseBucketName]]
            - !Join ['', ['arn:aws:s3:::', !Ref FirehoseBucketName, /*]]
      - PolicyName: logAccess
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['logs:PutLogEvents']
            Resource:
            - 'arn:aws:logs:*:*:*'

  FirehoseLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [CRGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 14

  CallRecordLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref FirehoseLogsGroup
      LogStreamName: !Join ['-', [CRStream, !Ref 'AWS::StackName']]

  SvcCallLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref FirehoseLogsGroup
      LogStreamName: !Join ['-', [SCStream, !Ref 'AWS::StackName']]

  CallRecordDeliveryStream:
    Type: "AWS::KinesisFirehose::DeliveryStream"
    Properties:
      DeliveryStreamName: !Join ['-', [!Ref 'AWS::StackName', callrec-stream]]
      RedshiftDestinationConfiguration:
        CloudWatchLoggingOptions:
          Enabled: True
          LogGroupName: !Ref 'FirehoseLogsGroup'
          LogStreamName: !Ref 'CallRecordLogStream'
        ClusterJDBCURL: !Ref RedshiftJDBCUrl
        Password: !Ref Password
        Username: !Ref Username
        RoleARN: !GetAtt FirehoseRole.Arn
        S3Configuration:
          BucketARN: !Join ['', ['arn:aws:s3:::', !Ref FirehoseBucketName]]
          BufferingHints:
            IntervalInSeconds: 60
            SizeInMBs: 10
          Prefix: '/cr'
          RoleARN: !GetAtt FirehoseRole.Arn
          CompressionFormat: UNCOMPRESSED
        CopyCommand:
          DataTableName: callrecord

  SvcCallDeliveryStream:
      Type: "AWS::KinesisFirehose::DeliveryStream"
      Properties:
        DeliveryStreamName: !Join ['-', [!Ref 'AWS::StackName', svccall-stream]]
        RedshiftDestinationConfiguration:
          CloudWatchLoggingOptions:
            Enabled: True
            LogGroupName: !Ref 'FirehoseLogsGroup'
            LogStreamName: !Ref 'SvcCallLogStream'
          ClusterJDBCURL: !Ref RedshiftJDBCUrl
          Password: !Ref Password
          Username: !Ref Username
          RoleARN: !GetAtt FirehoseRole.Arn
          S3Configuration:
            BucketARN: !Join ['', ['arn:aws:s3:::', !Ref FirehoseBucketName]]
            BufferingHints:
              IntervalInSeconds: 60
              SizeInMBs: 10
            Prefix: '/sc'
            RoleARN: !GetAtt FirehoseRole.Arn
            CompressionFormat: UNCOMPRESSED
          CopyCommand:
            DataTableName: svccall


Outputs:
  CallRecordDeliveryStream:
    Value: !Ref CallRecordDeliveryStream

  SvcCallDeliveryStream:
    Value: !Ref SvcCallDeliveryStream